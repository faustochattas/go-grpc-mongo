// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PersonasService_GetProyectos_FullMethodName                 = "/pb.PersonasService/GetProyectos"
	PersonasService_GetTickets_FullMethodName                   = "/pb.PersonasService/GetTickets"
	PersonasService_GetPersonas_FullMethodName                  = "/pb.PersonasService/GetPersonas"
	PersonasService_GetPersonasByAgeRange_FullMethodName        = "/pb.PersonasService/GetPersonasByAgeRange"
	PersonasService_GetPersonasPorNumeroDeTicket_FullMethodName = "/pb.PersonasService/GetPersonasPorNumeroDeTicket"
	PersonasService_GetPersonaByNombre_FullMethodName           = "/pb.PersonasService/GetPersonaByNombre"
	PersonasService_GetTicketPorNumero_FullMethodName           = "/pb.PersonasService/GetTicketPorNumero"
	PersonasService_GetTicketPorDueno_FullMethodName            = "/pb.PersonasService/GetTicketPorDueno"
	PersonasService_GetProyectoPorColaborador_FullMethodName    = "/pb.PersonasService/GetProyectoPorColaborador"
	PersonasService_GetColaboradoresPorProyecto_FullMethodName  = "/pb.PersonasService/GetColaboradoresPorProyecto"
)

// PersonasServiceClient is the client API for PersonasService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define el servicio gRPC
type PersonasServiceClient interface {
	GetProyectos(ctx context.Context, in *GetProyectosRequest, opts ...grpc.CallOption) (*GetProyectosResponse, error)
	GetTickets(ctx context.Context, in *GetTicketsRequest, opts ...grpc.CallOption) (*GetTicketsResponse, error)
	GetPersonas(ctx context.Context, in *GetPersonasRequest, opts ...grpc.CallOption) (*GetPersonasResponse, error)
	GetPersonasByAgeRange(ctx context.Context, in *GetPersonasByAgeRangeRequest, opts ...grpc.CallOption) (*GetPersonasResponse, error)
	GetPersonasPorNumeroDeTicket(ctx context.Context, in *GetPersonasPorNumeroDeTicketRequest, opts ...grpc.CallOption) (*GetPersonasResponse, error)
	GetPersonaByNombre(ctx context.Context, in *GetPersonaByNombreRequest, opts ...grpc.CallOption) (*PersonaResponse, error)
	GetTicketPorNumero(ctx context.Context, in *GetTicketPorNumeroRequest, opts ...grpc.CallOption) (*TicketResponse, error)
	GetTicketPorDueno(ctx context.Context, in *GetTicketPorDuenoRequest, opts ...grpc.CallOption) (*TicketResponse, error)
	GetProyectoPorColaborador(ctx context.Context, in *GetProyectoPorColaboradorRequest, opts ...grpc.CallOption) (*ProyectoResponse, error)
	GetColaboradoresPorProyecto(ctx context.Context, in *GetColaboradoresPorProyectoRequest, opts ...grpc.CallOption) (*GetColaboradoresPorProyectoResponse, error)
}

type personasServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonasServiceClient(cc grpc.ClientConnInterface) PersonasServiceClient {
	return &personasServiceClient{cc}
}

func (c *personasServiceClient) GetProyectos(ctx context.Context, in *GetProyectosRequest, opts ...grpc.CallOption) (*GetProyectosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProyectosResponse)
	err := c.cc.Invoke(ctx, PersonasService_GetProyectos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personasServiceClient) GetTickets(ctx context.Context, in *GetTicketsRequest, opts ...grpc.CallOption) (*GetTicketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTicketsResponse)
	err := c.cc.Invoke(ctx, PersonasService_GetTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personasServiceClient) GetPersonas(ctx context.Context, in *GetPersonasRequest, opts ...grpc.CallOption) (*GetPersonasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPersonasResponse)
	err := c.cc.Invoke(ctx, PersonasService_GetPersonas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personasServiceClient) GetPersonasByAgeRange(ctx context.Context, in *GetPersonasByAgeRangeRequest, opts ...grpc.CallOption) (*GetPersonasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPersonasResponse)
	err := c.cc.Invoke(ctx, PersonasService_GetPersonasByAgeRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personasServiceClient) GetPersonasPorNumeroDeTicket(ctx context.Context, in *GetPersonasPorNumeroDeTicketRequest, opts ...grpc.CallOption) (*GetPersonasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPersonasResponse)
	err := c.cc.Invoke(ctx, PersonasService_GetPersonasPorNumeroDeTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personasServiceClient) GetPersonaByNombre(ctx context.Context, in *GetPersonaByNombreRequest, opts ...grpc.CallOption) (*PersonaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PersonaResponse)
	err := c.cc.Invoke(ctx, PersonasService_GetPersonaByNombre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personasServiceClient) GetTicketPorNumero(ctx context.Context, in *GetTicketPorNumeroRequest, opts ...grpc.CallOption) (*TicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, PersonasService_GetTicketPorNumero_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personasServiceClient) GetTicketPorDueno(ctx context.Context, in *GetTicketPorDuenoRequest, opts ...grpc.CallOption) (*TicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, PersonasService_GetTicketPorDueno_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personasServiceClient) GetProyectoPorColaborador(ctx context.Context, in *GetProyectoPorColaboradorRequest, opts ...grpc.CallOption) (*ProyectoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProyectoResponse)
	err := c.cc.Invoke(ctx, PersonasService_GetProyectoPorColaborador_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personasServiceClient) GetColaboradoresPorProyecto(ctx context.Context, in *GetColaboradoresPorProyectoRequest, opts ...grpc.CallOption) (*GetColaboradoresPorProyectoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetColaboradoresPorProyectoResponse)
	err := c.cc.Invoke(ctx, PersonasService_GetColaboradoresPorProyecto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonasServiceServer is the server API for PersonasService service.
// All implementations must embed UnimplementedPersonasServiceServer
// for forward compatibility.
//
// Define el servicio gRPC
type PersonasServiceServer interface {
	GetProyectos(context.Context, *GetProyectosRequest) (*GetProyectosResponse, error)
	GetTickets(context.Context, *GetTicketsRequest) (*GetTicketsResponse, error)
	GetPersonas(context.Context, *GetPersonasRequest) (*GetPersonasResponse, error)
	GetPersonasByAgeRange(context.Context, *GetPersonasByAgeRangeRequest) (*GetPersonasResponse, error)
	GetPersonasPorNumeroDeTicket(context.Context, *GetPersonasPorNumeroDeTicketRequest) (*GetPersonasResponse, error)
	GetPersonaByNombre(context.Context, *GetPersonaByNombreRequest) (*PersonaResponse, error)
	GetTicketPorNumero(context.Context, *GetTicketPorNumeroRequest) (*TicketResponse, error)
	GetTicketPorDueno(context.Context, *GetTicketPorDuenoRequest) (*TicketResponse, error)
	GetProyectoPorColaborador(context.Context, *GetProyectoPorColaboradorRequest) (*ProyectoResponse, error)
	GetColaboradoresPorProyecto(context.Context, *GetColaboradoresPorProyectoRequest) (*GetColaboradoresPorProyectoResponse, error)
	mustEmbedUnimplementedPersonasServiceServer()
}

// UnimplementedPersonasServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPersonasServiceServer struct{}

func (UnimplementedPersonasServiceServer) GetProyectos(context.Context, *GetProyectosRequest) (*GetProyectosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProyectos not implemented")
}
func (UnimplementedPersonasServiceServer) GetTickets(context.Context, *GetTicketsRequest) (*GetTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickets not implemented")
}
func (UnimplementedPersonasServiceServer) GetPersonas(context.Context, *GetPersonasRequest) (*GetPersonasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonas not implemented")
}
func (UnimplementedPersonasServiceServer) GetPersonasByAgeRange(context.Context, *GetPersonasByAgeRangeRequest) (*GetPersonasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonasByAgeRange not implemented")
}
func (UnimplementedPersonasServiceServer) GetPersonasPorNumeroDeTicket(context.Context, *GetPersonasPorNumeroDeTicketRequest) (*GetPersonasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonasPorNumeroDeTicket not implemented")
}
func (UnimplementedPersonasServiceServer) GetPersonaByNombre(context.Context, *GetPersonaByNombreRequest) (*PersonaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonaByNombre not implemented")
}
func (UnimplementedPersonasServiceServer) GetTicketPorNumero(context.Context, *GetTicketPorNumeroRequest) (*TicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketPorNumero not implemented")
}
func (UnimplementedPersonasServiceServer) GetTicketPorDueno(context.Context, *GetTicketPorDuenoRequest) (*TicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketPorDueno not implemented")
}
func (UnimplementedPersonasServiceServer) GetProyectoPorColaborador(context.Context, *GetProyectoPorColaboradorRequest) (*ProyectoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProyectoPorColaborador not implemented")
}
func (UnimplementedPersonasServiceServer) GetColaboradoresPorProyecto(context.Context, *GetColaboradoresPorProyectoRequest) (*GetColaboradoresPorProyectoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColaboradoresPorProyecto not implemented")
}
func (UnimplementedPersonasServiceServer) mustEmbedUnimplementedPersonasServiceServer() {}
func (UnimplementedPersonasServiceServer) testEmbeddedByValue()                         {}

// UnsafePersonasServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonasServiceServer will
// result in compilation errors.
type UnsafePersonasServiceServer interface {
	mustEmbedUnimplementedPersonasServiceServer()
}

func RegisterPersonasServiceServer(s grpc.ServiceRegistrar, srv PersonasServiceServer) {
	// If the following call pancis, it indicates UnimplementedPersonasServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PersonasService_ServiceDesc, srv)
}

func _PersonasService_GetProyectos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProyectosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonasServiceServer).GetProyectos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonasService_GetProyectos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonasServiceServer).GetProyectos(ctx, req.(*GetProyectosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonasService_GetTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonasServiceServer).GetTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonasService_GetTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonasServiceServer).GetTickets(ctx, req.(*GetTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonasService_GetPersonas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonasServiceServer).GetPersonas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonasService_GetPersonas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonasServiceServer).GetPersonas(ctx, req.(*GetPersonasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonasService_GetPersonasByAgeRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonasByAgeRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonasServiceServer).GetPersonasByAgeRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonasService_GetPersonasByAgeRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonasServiceServer).GetPersonasByAgeRange(ctx, req.(*GetPersonasByAgeRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonasService_GetPersonasPorNumeroDeTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonasPorNumeroDeTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonasServiceServer).GetPersonasPorNumeroDeTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonasService_GetPersonasPorNumeroDeTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonasServiceServer).GetPersonasPorNumeroDeTicket(ctx, req.(*GetPersonasPorNumeroDeTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonasService_GetPersonaByNombre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonaByNombreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonasServiceServer).GetPersonaByNombre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonasService_GetPersonaByNombre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonasServiceServer).GetPersonaByNombre(ctx, req.(*GetPersonaByNombreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonasService_GetTicketPorNumero_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketPorNumeroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonasServiceServer).GetTicketPorNumero(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonasService_GetTicketPorNumero_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonasServiceServer).GetTicketPorNumero(ctx, req.(*GetTicketPorNumeroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonasService_GetTicketPorDueno_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketPorDuenoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonasServiceServer).GetTicketPorDueno(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonasService_GetTicketPorDueno_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonasServiceServer).GetTicketPorDueno(ctx, req.(*GetTicketPorDuenoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonasService_GetProyectoPorColaborador_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProyectoPorColaboradorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonasServiceServer).GetProyectoPorColaborador(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonasService_GetProyectoPorColaborador_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonasServiceServer).GetProyectoPorColaborador(ctx, req.(*GetProyectoPorColaboradorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonasService_GetColaboradoresPorProyecto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColaboradoresPorProyectoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonasServiceServer).GetColaboradoresPorProyecto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonasService_GetColaboradoresPorProyecto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonasServiceServer).GetColaboradoresPorProyecto(ctx, req.(*GetColaboradoresPorProyectoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonasService_ServiceDesc is the grpc.ServiceDesc for PersonasService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonasService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PersonasService",
	HandlerType: (*PersonasServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProyectos",
			Handler:    _PersonasService_GetProyectos_Handler,
		},
		{
			MethodName: "GetTickets",
			Handler:    _PersonasService_GetTickets_Handler,
		},
		{
			MethodName: "GetPersonas",
			Handler:    _PersonasService_GetPersonas_Handler,
		},
		{
			MethodName: "GetPersonasByAgeRange",
			Handler:    _PersonasService_GetPersonasByAgeRange_Handler,
		},
		{
			MethodName: "GetPersonasPorNumeroDeTicket",
			Handler:    _PersonasService_GetPersonasPorNumeroDeTicket_Handler,
		},
		{
			MethodName: "GetPersonaByNombre",
			Handler:    _PersonasService_GetPersonaByNombre_Handler,
		},
		{
			MethodName: "GetTicketPorNumero",
			Handler:    _PersonasService_GetTicketPorNumero_Handler,
		},
		{
			MethodName: "GetTicketPorDueno",
			Handler:    _PersonasService_GetTicketPorDueno_Handler,
		},
		{
			MethodName: "GetProyectoPorColaborador",
			Handler:    _PersonasService_GetProyectoPorColaborador_Handler,
		},
		{
			MethodName: "GetColaboradoresPorProyecto",
			Handler:    _PersonasService_GetColaboradoresPorProyecto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}

const (
	CreateService_CreatePersona_FullMethodName  = "/pb.CreateService/CreatePersona"
	CreateService_UpdatePersona_FullMethodName  = "/pb.CreateService/UpdatePersona"
	CreateService_DeletePersona_FullMethodName  = "/pb.CreateService/DeletePersona"
	CreateService_CreateTicket_FullMethodName   = "/pb.CreateService/CreateTicket"
	CreateService_UpdateTicket_FullMethodName   = "/pb.CreateService/UpdateTicket"
	CreateService_DeleteTicket_FullMethodName   = "/pb.CreateService/DeleteTicket"
	CreateService_CreateProyecto_FullMethodName = "/pb.CreateService/CreateProyecto"
	CreateService_UpdateProyecto_FullMethodName = "/pb.CreateService/UpdateProyecto"
	CreateService_DeleteProyecto_FullMethodName = "/pb.CreateService/DeleteProyecto"
)

// CreateServiceClient is the client API for CreateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreateServiceClient interface {
	// Métodos para editar personas
	CreatePersona(ctx context.Context, in *CreatePersonaRequest, opts ...grpc.CallOption) (*CreatePersonaResponse, error)
	UpdatePersona(ctx context.Context, in *UpdatePersonaRequest, opts ...grpc.CallOption) (*UpdatePersonaResponse, error)
	DeletePersona(ctx context.Context, in *DeletePersonaRequest, opts ...grpc.CallOption) (*DeletePersonaResponse, error)
	// Métodos para editar tickets
	CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error)
	UpdateTicket(ctx context.Context, in *UpdateTicketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Metodos para editar proyectos
	CreateProyecto(ctx context.Context, in *CreateProyectoRequest, opts ...grpc.CallOption) (*CreateProyectoResponse, error)
	UpdateProyecto(ctx context.Context, in *UpdateProyectoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteProyecto(ctx context.Context, in *DeleteProyectoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type createServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreateServiceClient(cc grpc.ClientConnInterface) CreateServiceClient {
	return &createServiceClient{cc}
}

func (c *createServiceClient) CreatePersona(ctx context.Context, in *CreatePersonaRequest, opts ...grpc.CallOption) (*CreatePersonaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePersonaResponse)
	err := c.cc.Invoke(ctx, CreateService_CreatePersona_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *createServiceClient) UpdatePersona(ctx context.Context, in *UpdatePersonaRequest, opts ...grpc.CallOption) (*UpdatePersonaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePersonaResponse)
	err := c.cc.Invoke(ctx, CreateService_UpdatePersona_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *createServiceClient) DeletePersona(ctx context.Context, in *DeletePersonaRequest, opts ...grpc.CallOption) (*DeletePersonaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePersonaResponse)
	err := c.cc.Invoke(ctx, CreateService_DeletePersona_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *createServiceClient) CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTicketResponse)
	err := c.cc.Invoke(ctx, CreateService_CreateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *createServiceClient) UpdateTicket(ctx context.Context, in *UpdateTicketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CreateService_UpdateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *createServiceClient) DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CreateService_DeleteTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *createServiceClient) CreateProyecto(ctx context.Context, in *CreateProyectoRequest, opts ...grpc.CallOption) (*CreateProyectoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProyectoResponse)
	err := c.cc.Invoke(ctx, CreateService_CreateProyecto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *createServiceClient) UpdateProyecto(ctx context.Context, in *UpdateProyectoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CreateService_UpdateProyecto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *createServiceClient) DeleteProyecto(ctx context.Context, in *DeleteProyectoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CreateService_DeleteProyecto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreateServiceServer is the server API for CreateService service.
// All implementations must embed UnimplementedCreateServiceServer
// for forward compatibility.
type CreateServiceServer interface {
	// Métodos para editar personas
	CreatePersona(context.Context, *CreatePersonaRequest) (*CreatePersonaResponse, error)
	UpdatePersona(context.Context, *UpdatePersonaRequest) (*UpdatePersonaResponse, error)
	DeletePersona(context.Context, *DeletePersonaRequest) (*DeletePersonaResponse, error)
	// Métodos para editar tickets
	CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketResponse, error)
	UpdateTicket(context.Context, *UpdateTicketRequest) (*emptypb.Empty, error)
	DeleteTicket(context.Context, *DeleteTicketRequest) (*emptypb.Empty, error)
	// Metodos para editar proyectos
	CreateProyecto(context.Context, *CreateProyectoRequest) (*CreateProyectoResponse, error)
	UpdateProyecto(context.Context, *UpdateProyectoRequest) (*emptypb.Empty, error)
	DeleteProyecto(context.Context, *DeleteProyectoRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCreateServiceServer()
}

// UnimplementedCreateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCreateServiceServer struct{}

func (UnimplementedCreateServiceServer) CreatePersona(context.Context, *CreatePersonaRequest) (*CreatePersonaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePersona not implemented")
}
func (UnimplementedCreateServiceServer) UpdatePersona(context.Context, *UpdatePersonaRequest) (*UpdatePersonaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersona not implemented")
}
func (UnimplementedCreateServiceServer) DeletePersona(context.Context, *DeletePersonaRequest) (*DeletePersonaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersona not implemented")
}
func (UnimplementedCreateServiceServer) CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedCreateServiceServer) UpdateTicket(context.Context, *UpdateTicketRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicket not implemented")
}
func (UnimplementedCreateServiceServer) DeleteTicket(context.Context, *DeleteTicketRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (UnimplementedCreateServiceServer) CreateProyecto(context.Context, *CreateProyectoRequest) (*CreateProyectoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProyecto not implemented")
}
func (UnimplementedCreateServiceServer) UpdateProyecto(context.Context, *UpdateProyectoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProyecto not implemented")
}
func (UnimplementedCreateServiceServer) DeleteProyecto(context.Context, *DeleteProyectoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProyecto not implemented")
}
func (UnimplementedCreateServiceServer) mustEmbedUnimplementedCreateServiceServer() {}
func (UnimplementedCreateServiceServer) testEmbeddedByValue()                       {}

// UnsafeCreateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreateServiceServer will
// result in compilation errors.
type UnsafeCreateServiceServer interface {
	mustEmbedUnimplementedCreateServiceServer()
}

func RegisterCreateServiceServer(s grpc.ServiceRegistrar, srv CreateServiceServer) {
	// If the following call pancis, it indicates UnimplementedCreateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CreateService_ServiceDesc, srv)
}

func _CreateService_CreatePersona_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateServiceServer).CreatePersona(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreateService_CreatePersona_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateServiceServer).CreatePersona(ctx, req.(*CreatePersonaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreateService_UpdatePersona_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersonaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateServiceServer).UpdatePersona(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreateService_UpdatePersona_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateServiceServer).UpdatePersona(ctx, req.(*UpdatePersonaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreateService_DeletePersona_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateServiceServer).DeletePersona(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreateService_DeletePersona_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateServiceServer).DeletePersona(ctx, req.(*DeletePersonaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreateService_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateServiceServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreateService_CreateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateServiceServer).CreateTicket(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreateService_UpdateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateServiceServer).UpdateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreateService_UpdateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateServiceServer).UpdateTicket(ctx, req.(*UpdateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreateService_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateServiceServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreateService_DeleteTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateServiceServer).DeleteTicket(ctx, req.(*DeleteTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreateService_CreateProyecto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProyectoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateServiceServer).CreateProyecto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreateService_CreateProyecto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateServiceServer).CreateProyecto(ctx, req.(*CreateProyectoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreateService_UpdateProyecto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProyectoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateServiceServer).UpdateProyecto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreateService_UpdateProyecto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateServiceServer).UpdateProyecto(ctx, req.(*UpdateProyectoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreateService_DeleteProyecto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProyectoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateServiceServer).DeleteProyecto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreateService_DeleteProyecto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateServiceServer).DeleteProyecto(ctx, req.(*DeleteProyectoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreateService_ServiceDesc is the grpc.ServiceDesc for CreateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CreateService",
	HandlerType: (*CreateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePersona",
			Handler:    _CreateService_CreatePersona_Handler,
		},
		{
			MethodName: "UpdatePersona",
			Handler:    _CreateService_UpdatePersona_Handler,
		},
		{
			MethodName: "DeletePersona",
			Handler:    _CreateService_DeletePersona_Handler,
		},
		{
			MethodName: "CreateTicket",
			Handler:    _CreateService_CreateTicket_Handler,
		},
		{
			MethodName: "UpdateTicket",
			Handler:    _CreateService_UpdateTicket_Handler,
		},
		{
			MethodName: "DeleteTicket",
			Handler:    _CreateService_DeleteTicket_Handler,
		},
		{
			MethodName: "CreateProyecto",
			Handler:    _CreateService_CreateProyecto_Handler,
		},
		{
			MethodName: "UpdateProyecto",
			Handler:    _CreateService_UpdateProyecto_Handler,
		},
		{
			MethodName: "DeleteProyecto",
			Handler:    _CreateService_DeleteProyecto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
